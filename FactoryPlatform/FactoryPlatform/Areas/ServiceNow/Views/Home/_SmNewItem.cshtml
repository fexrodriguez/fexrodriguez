@model List<SelectListItem>

<div class="card-body">
    <form id="NIForm" asp-area="ServiceNow" asp-controller="Home" asp-action="CreatNewItem" method="post" class="form">
        <div class="card-body p-9">
            <div class="row mb-6">
                <label class="col-lg-3 col-form-label required fw-bold fs-6">Item Code: </label>
                <div class="col-lg-3 fv-row">
                    <input type="text" id="NICode" name="NICode" maxlength="250" class="form-control p-3 fs-8" placeholder="Item Code" />
                </div>
            </div>
            <div class="row mb-6">
                <label class="col-lg-3 col-form-label required fw-bold fs-6">Item description: </label>
                <div class="col-lg-3 fv-row">
                    <input type="text" id="NIDescription" name="NIDescription" maxlength="85" class="form-control p-3 fs-8" placeholder="Item description" />
                </div>
            </div>
            <div class="row mb-6">
                <label class="col-lg-3 col-form-label required fw-bold fs-6">Middle code: </label>
                <div class="col-lg-3 fv-row">
                    <input type="text" id="NIMiddleCode" name="NIMiddleCode" class="form-control p-3 fs-8" placeholder="Middle code" />
                </div>
            </div>
            <div class="row mb-6">
                <label class="col-lg-3 col-form-label required fw-bold fs-6">Purchaser: </label>
                <div class="col-lg-3 fv-row">
                    <select id="PurchaserNI" name="PurchaserNI" class="form-select form-select-sm form-select p-3 fs-8" data-control="select2" data-placeholder="-- Select an option --" data-allow-clear="true">
                        <option></option>
                        @foreach (var item in Model)
                        {
                            <option value="@item.Value">@item.Text</option>
                        }
                    </select>
                </div>
            </div>
            <div class="row mt-12">
                <div class="col-md-9 offset-md-3">
                    <button type="button" class="btn btn-primary p-3 fs-7 me-3" id="itbutton_submit">
                        <span class="indicator-label"><i class="fas fa-save"></i> Save</span>
                        <span class="indicator-progress">
                            Please wait...
                            <span class="spinner-border spinner-border-sm align-middle ms-2"></span>
                        </span>
                    </button>
                </div>
            </div>
        </div>
    </form>
</div>

@if (Model != null)
{
    <script>

        $('#NICode').maxlength({
            threshold: 250,
            warningClass: "badge badge-danger",
            limitReachedClass: "badge badge-success",
            separator: ' of ',
            preText: 'You have ',
            postText: ' chars remaining.',
            validate: true
        });

        $('#NIDescription').maxlength({
            threshold: 85,
            warningClass: "badge badge-danger",
            limitReachedClass: "badge badge-success",
            separator: ' of ',
            preText: 'You have ',
            postText: ' chars remaining.',
            validate: true
        });


        //---------------------------------------------------------------------------------------------------------
        function sendFormNI() {
            var NICode = $('#NICode').val();
            var NIDescription = $('#NIDescription').val();
            var NIMiddleCode = $('#NIMiddleCode').val();
            var PurchaserNI = $('#PurchaserNI').val();
            var IdMenuService = '@ViewData["MenuId"]';

            $.ajax({
                url: "@Url.Action("CreatNewItem","ServiceMenu")",
                type: "post",
                data:
                {
                    NICode: NICode,
                    NIDescription: NIDescription,
                    NIMiddleCode: NIMiddleCode,
                    PurchaserNI: PurchaserNI,
                    IdMenuService: IdMenuService
                },
                beforeSend: function(xhr) {
                    xhr.setRequestHeader("XSRF-TOKEN",
                        $('input:hidden[name="__RequestVerificationToken"]').val());
                },
            })
                .done(function(result) {
                    if (result != null) {
                        if (result == 'Error') {
                            SystemServerError()
                        }
                        if (result == 'noSession') {
                            swalExpired()
                        }
                        else if (result == 'Sorry') {
                            swalNoAuthorized()
                        }
                        else if (result == 'NoPage') {
                            swalNoAuthorized()
                        }
                        else if (result == "correct") {
                            toastr.success("New Item was save success.!");
                            $('#NICode').val(null);
                            $('#NIDescription').val(null);
                            $('#NIMiddleCode').val(null);
                            $('#PurchaserNI').val(null).trigger('change');
                        }
                    }
                    else {
                        SystemServerError()
                    }
                })
                .fail(function(xhr, status, error) {
                    swalErrorServer()
                })
        }

        //--------------------------------------------------------------------------------------------------

        "use strict";

        // Class definition
        var KTAccountSettingsSigninMethods = function() {

            var formWorkOrdersHR = function(e) {
                var validation;

                // form elements
                var NIForm = document.getElementById('NIForm');

                validation = FormValidation.formValidation(
                    NIForm,
                    {
                        fields: {
                            NICode: {
                                validators: {
                                    notEmpty: {
                                        message: 'Item Code is required'
                                    }
                                }
                            },
                            NIDescription: {
                                validators: {
                                    notEmpty: {
                                        message: 'Item Description is required'
                                    }
                                }
                            },
                            NIMiddleCode: {
                                validators: {
                                    notEmpty: {
                                        message: 'Middle code is required'
                                    }
                                }
                            },
                            PurchaserNI: {
                                validators: {
                                    notEmpty: {
                                        message: 'Purchaser is required'
                                    }
                                }
                            },

                        },

                        plugins: { //Learn more: https://formvalidation.io/guide/plugins
                            trigger: new FormValidation.plugins.Trigger(),
                            bootstrap: new FormValidation.plugins.Bootstrap5({
                                rowSelector: '.fv-row'
                            })
                        }
                    }
                );

                NIForm.querySelector('#itbutton_submit').addEventListener('click', function(e) {
                    e.preventDefault();

                    validation.validate().then(function(status) {

                        if (status == 'Valid') {
                            sendFormNI()
                            validation.resetForm();
                        }
                        else {
                            swal.fire({
                                text: "Sorry, looks like there are some errors detected, please try again.",
                                icon: "error",
                                buttonsStyling: false,
                                confirmButtonText: "Ok, got it!",
                                customClass: {
                                    confirmButton: "btn font-weight-bold btn-light-primary"
                                }
                            });

                        }
                    });
                });
            }

            // Public methods
            return {
                init: function() {
                    formWorkOrdersHR();
                }
            }
        }();

        // On document ready
        KTUtil.onDOMContentLoaded(function() {
            KTAccountSettingsSigninMethods.init();
        });
    </script>
}